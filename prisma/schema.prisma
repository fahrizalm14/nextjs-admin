// Ini adalah model Prisma yang telah kita definisikan sebelumnya

generator client {
  provider = "prisma-client-js"
  output   = "../libs/generated/prisma"
}

datasource db {
  provider = "postgresql" // Ganti dengan "mysql" atau "sqlite" jika Anda menggunakan database lain
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String?
  name         String?
  storageTotal BigInt   @default(107374182400)
  storageUsed  BigInt   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isVerified   Boolean  @default(false)
  role         String   @default("user") // admin | guest | user

  // files             File[]              @relation("UserFiles")
  // folders           Folder[]            @relation("UserFolders")
  // activityLogs      ActivityLog[]
  // sharedFiles       Share[]             @relation("SharedFiles")
  EmailVerification EmailVerification[]
}

// Authentication Model
model Authentication {
  id           String   @id @default(uuid())
  refreshToken String   @unique
  deviceId     String
  ua           String   @default("")
  location     String   @default("")
  active       Boolean
  expiredAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// File Model
// model File {
//   id        String  @id @default(uuid())
//   name      String
//   key       String
//   path      String  @unique
//   size      BigInt
//   fileType  String
//   extension String?

//   ownerId String
//   owner   User   @relation("UserFiles", fields: [ownerId], references: [id])

//   folderId String?
//   folder   Folder? @relation("FolderFiles", fields: [folderId], references: [id])

//   modified  DateTime @updatedAt
//   createdAt DateTime @default(now())

//   shares       Share[]
//   activityLogs ActivityLog[]
// }

// // Folder Model
// model Folder {
//   id   String @id @default(uuid())
//   name String
//   path String @unique

//   ownerId String
//   owner   User   @relation("UserFolders", fields: [ownerId], references: [id])

//   parentFolderId String?
//   parentFolder   Folder?  @relation("SubFolders", fields: [parentFolderId], references: [id])
//   subFolders     Folder[] @relation("SubFolders")

//   files File[] @relation("FolderFiles")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// // ActivityLog Model
// model ActivityLog {
//   id        String   @id @default(uuid())
//   action    String
//   fileName  String
//   timestamp DateTime @default(now())

//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   fileId String?
//   file   File?   @relation(fields: [fileId], references: [id])
// }

// // Share Model
// model Share {
//   id     String @id @default(uuid())
//   fileId String
//   file   File   @relation(fields: [fileId], references: [id])

//   sharedWithId String
//   sharedWith   User   @relation("SharedFiles", fields: [sharedWithId], references: [id])

//   sharedAt DateTime @default(now())
// }
